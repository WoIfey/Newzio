generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  News          News[]
  Comment       Comment[]
  ArticleLike   ArticleLike[]
  CommentLike   CommentLike[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model News {
  id        String        @id @default(cuid())
  key       String
  name      String
  size      Int
  type      String
  url       String
  headline  String
  lead      String
  body      String
  tag       String
  likes     Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String        @map("user_id")
  userName  String        @map("user_name")
  userImage String        @map("user_image")
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes_rel ArticleLike[]

  @@map("news")
}

model Comment {
  id        String        @id @default(cuid())
  message   String
  likes     Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  articleId String        @map("article_id")
  userId    String        @map("user_id")
  userName  String        @map("user_name")
  userImage String        @map("user_image")
  article   News          @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes_rel CommentLike[]

  @@map("comments")
}

model ArticleLike {
  id        String   @id @default(cuid())
  articleId String   @map("article_id")
  userId    String   @map("user_id")
  userName  String   @map("user_name")
  userImage String   @map("user_image")
  createdAt DateTime @default(now())
  article   News     @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([articleId, userId])
  @@map("articlelikes")
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String   @map("comment_id")
  articleId String   @map("article_id")
  userId    String   @map("user_id")
  userName  String   @map("user_name")
  userImage String   @map("user_image")
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@map("commentlikes")
}

model ProfanityWord {
  id   String @id @default(cuid())
  word String

  @@map("profanity")
}
